ssh -p 51800 s19433@remote.vdi.mipt.ru
ssh -p 51804 sparkuser@remote.vdi.mipt.ru

ssh -p 51804 sparkuser@bds04.vdi.mipt.ru
ssh -p 51800 sparkuser@bds04.vdi.mipt.ru

hadoop fs -get /user/s19433/user_events_result/part-r-00000
hadoop fs -tail  /user/s19433/user_events_result/part-r-00000

spark-submit --master yarn-client ./spark_hobot/spark_1.py
spark-submit --master yarn-client ./spark_hobot/spark_5.py

/data/access_logs/small.log



hbase org.apache.hadoop.hbase.mapreduce.ImportTsv -Dimporttsv.separator=' ' -Dimporttsv.columns=HBASE_ROW_KEY,colfam:address,colfam:val table_19433 /user/s19433/user_events_result/part-r-00000

get 'table_19433', '2014-10-14:youtube.com'

get 't_19433', 'row1'
put 't_19433', 'row1', 'f1', 'zz'

client_top.py –from 2014-10-10 –to 2014-10-14
hadoop fs -tail  /user/s19433/spark_test/part-00000

'94.168.250.169 - - [19/Dec/2015:00:00:02 +0400] "GET HTTP/1.1" 200 16495 "-" "Mozilla/5.0 (Linux; Android 5.0.2; LG-D415 Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/34.0.1847.118 Mobile Safari/537.36"'

148.185.152.35 - - [19/Dec/2015:00:00:02 +0400] "GET /id10649 HTTP/1.1" 200 32149 "-" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.99 Safari/537.36"
207.209.25.199 - - [19/Dec/2015:00:00:02 +0400] "GET /id13030 HTTP/1.1" 200 16816 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.130 Safari/537.36"
82.148.32.58 - - [19/Dec/2015:00:00:02 +0400] "GET /id50203 HTTP/1.1" 200 13295 "-" "Mozilla/5.0 (Linux; U; Android 4.0.3; ja-jp; F-01D Build/V10R32D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"


data = [("1", '''{"f1": "value1", "f2": "value2"}'''), ("2", '''{"f1": "value12"}''')]

df = sc.parallelize([Row(name='Alice', age=5, height=80),Row(name='Alice', age=5, height=80),Row(name='Alice', age=10, height=80)]).toDF()


#ips_with_7 = [ip for ip in ips if "7" in ip]
text_file = sc.textFile("/user/s19433/small.log")

text_line = '195.206.123.39 - - time get 200 10 bing.html df'
data = text_file.flatMap(lambda line: line.split(" ")).toDF(["ip","miss_1", "miss_2", "req_time", "req_string", "ans_code", "ans_size", "ref", "bro_id"])
data = [['195.206.123.39','-','-','time','get','200','10','bing.html','df']].toDF("ip","miss_1", "miss_2", "req_time", "req_string", "ans_code", "ans_size", "ref", "bro_id")

ip_count = ips.map(lambda ip: (ip, 1) if "7" in ip else (ip,0)).reduceByKey(lambda a, b: a + b)
print ip_count[0:9]
#counts.saveAsTextFile("hdfs://...")

data = [("1", '''{"f1": "value1", "f2": "value2"}'''), ("2", '''{"f1": "value12"}''')]

df = sc.parallelize([Row(name='Alice', age=5, height=80),Row(name='Alice', age=5, height=80),Row(name='Alice', age=10, height=80)]).toDF()



val df1 = sc.makeRDD(1 to 5).map(i => (i, i * 2)).toDF("single", "double")


def get_row(line):
	data = line.split(" ")
	row = Row(ip=data[0], miss_1=data[1], miss_2=data[2], req_time=data[3], req_string=data[4], ans_code=data[5], ans_size=int(data[6]), ref=data[7], bro_id=data[8])

data = text_file.flatMap(lambda line: get_row(line)).toDF()

counts = text_file.map(lambda line: line.split(" ")[0]).map(lambda ip: (ip, 1) if "7" in ip else (ip,0)).reduceByKey(lambda a, b: a + b)


>>> df[df.name.isin("Bob", "Mike")].collect()
[Row(age=5, name=u'Bob')]
>>> df[df.age.isin([1, 2, 3])].collect()
[Row(age=2, name=u'Alice')]

>>> df.filter(df.age > 3).collect()
[Row(age=5, name=u'Bob')]
>>> df.where(df.age == 2).collect()
[Row(age=2, name=u'Alice')]
>>> df.filter("age > 3").collect()
[Row(age=5, name=u'Bob')]
>>> df.where("age = 2").collect()
[Row(age=2, name=u'Alice')]


160128	{(297792,0),(391851,768),(539148,0),(591263,0),(606659,0),(640664,0),(654161,0),(713058,0),(1151213,0),(1198442,0),(1226460,0),(1270906,0),(1284460,0),(1315610,0),(1422519,1024),(1438551,1024),(1620711,0),(1672515,0),(1743930,0),(1843594,0),(1856803,0),(1876681,0),(1888586,0),(1892757,0),(1899335,0),(1902207,0),(1916185,0),(1943530,0),(2351773,0),(2433987,0),(2482721,0),(2580794,0),(2588872,0),(2607776,0),(2612702,0),(2628535,0),(2850750,0),(2879284,0),(3249390,0),(3593330,0),(3841620,0),(3880732,0),(4260165,0),(4346035,0),(4429942,0),(4452468,0),(4522442,0),(4542157,0),(4593417,0),(4599497,0),(4794619,2),(5033200,0),(5159301,0),(5179659,0),(5245054,0),(5605607,0),(5684982,0),(5787455,0),(5807689,0),(5824582,0),(5839359,0),(5871709,0),(6366805,0),(6447843,0),(6518794,0),(6602274,0),(6643488,0),(6899795,1024),(6970855,0),(7136620,0),(7156276,0),(7174884,0),(7225199,0),(7528389,16384),(7669202,0),(7795860,0),(7808005,0),(7820711,0),(7882450,0),(8046335,0),(8052011,0),(8437276,0),(8479362,0),(8500150,0),(8548490,0),(8555239,0),(8594067,0),(8648520,16384),(8696606,0),(8896328,0),(8944067,0),(9149798,0),(9299689,64),(9565254,0),(9612432,0),(9642780,0),(9808950,0),(10355771,0),(10379186,0),(10389990,0),(10402358,0),(10995180,0),(11054145,0),(11066419,0),(11125837,0),(11353679,0),(11630198,0),(11702610,0),(11768267,0),(11779392,0),(11827556,0),(11836229,0),(12066315,0),(12130393,0),(12890141,0),(12984522,0),(13041876,0),(13068867,0),(13078365,0),(13119436,0),(13560684,0),(13705884,0),(13713688,0),(13774564,0),(13813893,0),(13883779,0),(13967069,0),(14254539,0),(14359565,0),(14919802,0),(14997267,0),(15027953,0),(15110007,0),(15447710,16384),(15524505,16384),(15619200,0),(15721578,0),(15732256,0),(15810879,0),(15961338,0),(16155379,0),(16336201,0),(16364491,0),(16396539,0),(16886299,0),(16958519,0),(16978841,0),(17011180,0),(17044294,0),(17082254,0),(17090298,0),(17152465,0),(17293045,0),(17320891,0),(17592155,0),(17653455,0),(17656699,0),(17917744,0),(18043500,0),(18216944,0),(18229143,0),(18310919,0),(18480850,0),(19014483,0),(19433307,1024),(19610488,0),(19625977,0),(19724170,0),(19870635,0),(20286540,0),(20504678,0),(20762589,0),(20797193,0),(20849789,0),(20883343,0),(20891170,0),(20968899,0),(21018802,0),(21093467,0),(21121421,512),(21190966,512),(21202453,16384),(21577195,0),(21682589,8),(21755544,0),(21764906,0),(21885620,0),(22086041,0),(22198914,0),(22255831,0),(22264987,0),(22269255,0),(22270432,1048576),(22309918,0),(22452706,0),(22706778,0),(22887667,0),(22903409,0),(22982576,0),(23086899,0),(23147760,0),(23217361,0),(23281344,0),(23512321,0),(23544909,0),(23551074,0),(23559473,0),(23567465,0),(23603104,0),(23633070,0),(23914721,0),(24046395,0),(24073489,0),(24075984,0),(24099016,0),(24249776,0),(24263578,0),(24296731,0),(24333125,0),(24687376,0),(24748810,0),(24816709,0),(24837384,0),(24929613,0),(24987660,0),(25105507,0),(25237741,0),(25525347,0),(25624713,0),(25637363,0),(25721245,17408),(26063717,0),(26119119,0),(26152984,0),(26170863,0),(26189748,0),(26212432,1048576),(26246995,0),(26248972,0),(26548976,0),(26907525,0),(26935173,0),(26939847,0),(26956196,0),(27084669,0),(27387037,0),(27414077,0),(27508868,0),(27714172,0),(27886939,16384),(28018107,0),(28203640,0),(28269730,512),(28431513,0),(28574648,0),(28749867,0),(28763804,0),(28812373,0),(28857338,0),(28865253,0),(29051626,1024),(29225038,0),(29276754,0),(29384594,0),(29472414,0),(29483198,0),(29535882,0),(29561584,0),(29732174,0),(29768042,16384),(29804105,16384),(30198662,0),(30219965,0),(30229505,0),(30236440,0),(30642569,0),(30811563,0),(30865092,0),(30872916,0),(30876669,0),(31490772,0),(31492191,0),(31542629,0),(31547001,0),(31762743,0),(31976502,0),(32179154,0),(32181018,0),(32364089,0),(32486581,0),(32839892,0),(32843375,0),(33026408,0),(33120939,0),(33365654,0),(33398153,0),(33448353,0),(33458925,0),(33565154,0),(33940411,0),(34115545,0),(34167631,0),(34288885,16384),(34465953,0),(34754761,0),(34796744,0),(34853164,0),(34998809,0),(35124661,16384),(35439793,0),(35457484,0),(35725776,0),(36016955,0),(36062975,0),(36131350,0),(36146066,0),(36320147,0),(36370180,0),(36379697,16384),(36430490,0),(36771189,0),(36791227,0),(36837134,0),(37061380,0),(37092054,0),(37207851,0),(37296814,0),(37316049,0),(37365808,0),(37408737,0),(37431191,0),(37472620,0),(37587225,0),(37795742,0),(38264494,0),(38515766,512),(38698007,0),(38712819,0),(38715431,0),(38898422,0),(39028616,0),(39063634,16384),(39182575,0),(39226187,0),(39293474,0),(39351087,0),(39436429,0),(39544844,0),(39757970,0),(39915556,0),(39993764,0),(40048918,0),(40163080,0),(40188105,0),(40249559,16384),(40466017,0),(40494884,1024),(40669714,0),(40924205,16384),(41199851,0),(41306989,0),(41314192,0),(41377064,0),(41422739,0),(41485897,0),(41490096,0),(41509531,0),(41687511,0),(41825373,0),(41962981,256),(42004995,0),(42079319,0),(42299311,16384),(42507825,0),(42547182,0),(42575902,0),(42635375,0),(42653230,0),(42663021,0),(42666939,0),(42675600,0),(42715845,0),(42799414,0),(42928144,0),(43309132,0),(43309514,0),(43380809,0),(43380877,0),(43545208,0),(43720852,0),(43896341,0),(44133183,0),(44469490,0),(44558034,0),(44597583,0),(44630289,0),(44663800,0),(44690064,0),(44946654,0),(45232070,0),(45544007,0),(45676933,0),(45830922,0),(45963371,0),(46003959,0),(46444847,0),(46450999,0),(46584845,0),(46606671,0),(46679117,0),(47206528,0),(47230298,0),(47234432,0),(47249456,0),(47292605,0),(47318603,0),(47330719,0),(47503331,0),(47605950,0),(47656916,16384),(47846166,0),(47889079,0),(47922610,0),(47944435,0),(47996002,256),(48074537,0),(48081574,0),(48429002,0),(48432820,0),(48454433,0),(48547009,0),(48603270,0),(48612773,0),(48654153,256),(48811358,512),(49056759,0),(49067109,0),(49122683,0),(49125277,0),(49161766,0),(49188101,0),(49230556,0),(49270432,0),(49292696,0),(49306674,0),(49310114,0),(49859868,0),(49876684,0),(49902111,0),(49906553,0),(49915981,0),(49965264,0),(50007505,0),(50038037,0),(50211170,0),(50368850,0),(50511448,0),(50536020,0),(50632220,0),(50954255,0),(51233619,0),(51235635,0),(51274822,0),(51429915,0),(51797690,32),(51893260,0),(51942470,0),(52110360,16384),(52517223,0),(52528687,0),(52539993,0),(52541015,0),(52643826,0),(52776668,0),(52975210,0),(53106903,0),(53198318,0),(53229688,0),(53230234,0),(53243939,0),(53440103,0),(53441864,0),(53668168,0),(53703203,0),(53915761,0),(54123414,0),(54504330,0),(54538556,0),(54878878,0),(54911168,0),(55007559,0),(55208029,0),(55404170,16384),(55409535,32),(55700007,0),(55758330,0),(55796376,0),(55824816,0),(55835686,0),(55892055,0),(56001701,0),(56031949,0),(56420427,0),(56432737,0),(56437956,0),(56596551,0),(56686745,0),(56688178,0),(56699753,0),(56772516,0),(57055642,0),(57098485,0),(57112555,0),(57172293,0),(57187883,0),(57352695,1024),(57507356,0),(57667367,0),(57719415,0),(57766520,64),(57822835,0),(57960749,0),(57987981,0),(58047373,0),(58298933,64),(58787419,0),(58837160,0),(59068338,0),(59085807,0),(59111258,0),(59114934,0),(59120248,0),(59342129,16384),(59377602,0),(59489854,0),(59716616,0),(59995132,16384),(60251416,0),(60427880,0),(60452533,0),(60475524,0),(60567335,16384),(60597981,0),(60664257,512),(60683405,0),(60772906,0),(60929219,0),(61023427,0),(61045144,0),(61147316,0),(61243075,0),(61435346,0),(61485540,0),(61578280,0),(61720573,0),(61737936,0),(61800942,0),(61864373,16384),(61997285,0),(62332596,0),(62333673,0),(62355500,0),(62362400,0),(62611040,0),(62651563,0),(62866439,0),(63076011,0),(63103301,0),(63365243,0),(63399018,0),(63595332,0),(63622219,0),(63760768,0),(63946288,16384),(63974975,1280),(64188679,0),(64191347,0),(64205356,0),(64365470,0),(64452190,0),(64728549,0),(65081778,0),(65259368,0),(65382908,0),(65413682,512),(65503875,0),(65624751,0),(65627923,0),(65635460,0),(65680573,0),(65739597,0)}
160768	{(173899,64),(211738,0),(336133,0),(990721,256),(1693202,0),(2224118,0),(2958784,0),(3001060,0),(3690857,1024),(4930951,0),(6146344,0),(6288370,0),(6618591,0),(6855653,0),(7189022,64),(8093622,0),(8095500,1),(8151973,1024),(8758923,0),(8975155,0),(9585381,0),(11486664,0),(12027916,1),(12189399,0),(12713917,0),(12878204,0),(12892248,0),(14756400,0),(14795975,0),(16004248,0),(16672951,0),(16958487,0),(17287706,0),(17299426,1),(17447235,0),(17979874,0),(18090437,0),(19569780,0),(19992875,0),(21436174,0),(22067028,0),(23722907,0),(23977275,0),(24010320,0),(27313621,0),(27352786,0),(27382362,0),(27829864,0),(28486033,0),(28662642,0),(29387034,0),(30571887,0),(31759898,0),(32598500,0),(33293872,0),(33473870,0),(33778422,32),(34410096,0),(34527830,0),(34564764,0),(35214108,0),(35580667,0),(36444547,0),(36445732,0),(37135572,0),(37146888,0),(38331868,1),(39573973,0),(39788569,0),(40318395,0),(40500603,0),(41058756,0),(41076396,0),(41142595,64),(41737224,0),(42293051,0),(42419119,0),(42950327,0),(42994689,0),(43601258,0),(43668117,0),(43776292,0),(45666089,0),(45742990,0),(46298463,256),(46345480,0),(46883865,0),(47627797,0),(47641841,128),(48935171,0),(48942992,0),(50145521,1),(50330702,1024),(51580565,0),(53149538,0),(53519051,0),(53650863,0),(54098343,0),(54234031,0),(54827389,0),(56292614,0),(56420436,0),(56664149,0),(57302886,64),(59468316,256),(59636764,0),(60028854,0),(60618322,0),(60803201,0),(60819124,0),(62752319,0),(63395440,0),(63475806,0),(64153506,0),(64848334,0)}
162160	{(5222504,0),(8372581,0),(11795834,0),(14893557,0),(15528276,0),(15921499,0),(18743046,0),(19472546,0),(20838914,0),(22730121,0),(24294600,0),(26734651,0),(28205833,0),(30497194,0),(31982827,0),(47781888,0),(47818012,0),(48366635,0),(49761144,0),(54950204,0),(55622565,0),(56307065,0),(58167703,0),(59753067,0),(60048281,0),(61645504,0),(63211610,0),(64274408,0)}


http://spark.apache.org/examples.html
http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes
http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame
http://spark.apache.org/docs/latest/sql-programming-guide.html
http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame
http://www.cloudera.com/documentation/enterprise/5-3-x/topics/admin_hbase_import.html

HBASE_CLASSPATH=$(hbase mapredcp | tr ':' ',')


------------------------------------------------------
add jar /opt/cloudera/parcels/CDH/lib/hive/lib/hive-contrib.jar;

-- 46.17.238.36 - - [12/Nov/2015:00:00:00 +0400] "GET /cgi-bin/survey.cgi HTTP/1.1" 404 0 "-" "Mozilla/6.66"
-- 154.73.129.105 - - [12/Nov/2015:00:00:00 +0400] "GET /cgi-bin/nph-exploitscanget.cgi HTTP/1.1" 404 0 "-" "Mozilla/6.66"
-- 197.231.214.121 - - [12/Nov/2015:00:00:00 +0400] "GET /print.cgi HTTP/1.1" 404 0 "-" "Mozilla/6.66"
-- 197.234.100.211 - - [12/Nov/2015:00:00:00 +0400] "GET /details.cgi HTTP/1.1" 404 0 "-" "Mozilla/6.66"
-- 194.110.69.79 - - [12/Nov/2015:00:00:00 +0400] "GET /id97715 HTTP/1.1" 200 18439 "-" "Mozilla/4.0 (compatible; MSIE 7.0; TOB 6.13; Windows NT 5.1; Trident/4.0; BTRS129235; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"
-- 91.210.214.168 - - [12/Nov/2015:00:00:00 +0400] "GET /id60269 HTTP/1.1" 200 9764 "-" "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:31.0) Gecko/20100101 Firefox/31.0 Cyberfox/31.0.1"
-- 213.142.114.75 - - [12/Nov/2015:00:00:00 +0400] "GET /id75409 HTTP/1.1" 200 23810 "-" "Mozilla/5.0 (Windows NT 5.1; U; de; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 11.00"
-- 188.93.131.140 - - [12/Nov/2015:00:00:00 +0400] "GET /id56230 HTTP/1.1" 200 23094 "-" "Mozilla/5.0 (Linux; Android 5.0.2; SM-T535 Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.84 Safari/537.36"
-- 212.84.56.218 - - [12/Nov/2015:00:00:00 +0400] "GET /id73585 HTTP/1.1" 200 24225 "-" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.99 Safari/537.36"
-- 91.221.248.7 - - [12/Nov/2015:00:00:00 +0400] "GET /id51636 HTTP/1.1" 200 30428 "-" "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.99 Safari/537.36"
use shtokhov;

DROP TABLE IF EXISTS serdeuserlogs;

CREATE EXTERNAL TABLE serdeuserlogs (
    host STRING,
    date STRING,
    request STRING,
    response_code STRING,
    response_size STRING
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe'
WITH SERDEPROPERTIES(
   "input.regex"= '^(\\S*) \\S* \\S* \\[(\\S*) .*] \\"\\S* (\\/\\S*) .*?\\" (\\d*) (\\d*) .*$',
   "output.format.string" = '%1$s %2$s %3$s %4$s %5$s'
)
LOCATION "/user/shtokhov/test_log/";

-- DROP TABLE IF EXISTS user_day;
-- create table user_day as
-- select distinct(host), 
--     from_unixtime(unix_timestamp(date ,'dd/MMM/yyyy:HH:mm:ss'), 'yyyyMMdd') as date_hit 
--         from serdeuserlogs;


select count(*)
from (select host from user_day where date_hit=='20151021') a
left join ( select host from user_day where date_hit=='20151020' ) b on a.host=b.host
where b.host is NULL
----------------------------------------------------------
package ru.mipt;

// PutExample Example application inserting data into HBase
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.hbase.TableExistsException;

import java.io.IOException;
import java.util.Map;
import java.util.Map.Entry;

public class PutExample {
    public static void createTable(Admin admin, TableName table, byte[][] splitKeys, String... colfams) throws IOException {
        HTableDescriptor desc = new HTableDescriptor(table);
        for (String cf : colfams) {
            HColumnDescriptor coldef = new HColumnDescriptor(cf);
            desc.addFamily(coldef);
        }
        if (splitKeys != null) {
            admin.createTable(desc, splitKeys);
        } else {
            admin.createTable(desc);
        }
    }

    public static void main(String[] args) throws IOException {
        Configuration conf = HBaseConfiguration.create();
        Connection connection = ConnectionFactory.createConnection(conf);
        Admin admin = connection.getAdmin();

        TableName tableName = TableName.valueOf("testtable123");
        if (!admin.tableExists(tableName)) {
            System.err.println("table not exists " + tableName.toString());
            createTable(admin, tableName, null, "colfam1", "colfam2");
        }

        HTable table = new HTable(conf, tableName);

        Put put = new Put(Bytes.toBytes("row1"));
        put.add(Bytes.toBytes("colfam1"), Bytes.toBytes("qual4"), Bytes.toBytes("val4"));
        put.add(Bytes.toBytes("colfam1"), Bytes.toBytes("qual2"), Bytes.toBytes("val2"));

        table.put(put);
    }
}


HBASE_CLASSPATH=$(hbase mapredcp | tr ':' ',')
